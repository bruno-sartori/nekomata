{"version":3,"file":"editor-timeline.js","sourceRoot":"","sources":["../../../src/components/editor/editor-timeline.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAkB,IAAI,EAAE,MAAM,KAAK,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,mBAAmB,CAAC;AAC3B,OAAO,+BAA+B,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE1D,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,sBAAsB,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAInF,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,UAAU;IAAvC;;QAIL,YAAO,GAAwB,EAAE,CAAC;QAI1B,gBAAW,GAAoB,sBAAsB,CAAC;QAG9D,aAAQ,GAAa,EAAE,CAAC;QAGxB,cAAS,GAA6B,EAAE,CAAC;QAGzC,aAAQ,GAAwB,EAAE,CAAC;QAE3B,iBAAY,GAA0B,EAAE,CAAC;IAyCnD,CAAC;IAvCU,OAAO,CAAC,iBAAuC;QACtD,IAAI,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC;YACzC,MAAM,cAAc,GAAG,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAoB,CAAC;YAE/E,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,cAAc,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAC/E,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC9E,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;gBAKC,IAAI,CAAC,YAAY;;;0BAGP,IAAI,CAAC,QAAQ;;;yBAGd,IAAI,CAAC,OAAO;0BACX,IAAI,CAAC,QAAQ;2BACZ,IAAI,CAAC,SAAS;;;;;KAKpC,CAAC;IACJ,CAAC;IAEO,kBAAkB,CAAC,QAAgB,EAAE,MAA2B;QACtE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC;YACjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAA;qCACI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE,KAAK,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC;OACnG,CAAC,CAAC;QACL,CAAC;IACH,CAAC;;AA1De,qBAAM,GAAG,mBAAmB,AAAtB,CAAuB;AAG7C;IADC,KAAK,EAAE;+CAC0B;AAI1B;IAFP,OAAO,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IACtD,KAAK,EAAE;mDACsD;AAG9D;IADC,KAAK,EAAE;gDACgB;AAGxB;IADC,KAAK,EAAE;iDACiC;AAGzC;IADC,KAAK,EAAE;gDAC2B;AAjBxB,cAAc;IAD1B,aAAa,CAAC,iBAAiB,CAAC;GACpB,cAAc,CA4D1B","sourcesContent":["import { LitElement, TemplateResult, html } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { editorTimelineStyle } from '../../styles/editor-timeline.style';\nimport './editor-playback';\nimport '../timeline/timeline-chapters';\nimport { getTimeString, isFloat } from '../../utils/time';\nimport { ChapterRange, Progress, RangeTimings } from '../../types';\nimport { consume } from '@lit/context';\nimport { initialTimelineContext, timelineContext } from '../../contexts/timeline-context';\nimport { TimelineContext } from '../../@types/contexts';\n\n@customElement('editor-timeline')\nexport class EditorTimeline extends LitElement {\n  static override styles = editorTimelineStyle;\n\n  @state()\n  timings: Array<RangeTimings> = [];\n\n  @consume({ context: timelineContext, subscribe: true })\n  @state()\n  private timelineCtx: TimelineContext = initialTimelineContext;\n\n  @state()\n  progress: Progress = {};\n\n  @state()\n  snapshots: Array<HTMLCanvasElement> = [];\n\n  @state()\n  chapters: Array<ChapterRange> = [];\n\n  private timelineInfo: Array<TemplateResult> = [];\n\n  override updated(changedProperties: Map<string, unknown>) {\n    if (changedProperties.has('timelineCtx')) {\n      const oldTimelineCtx = changedProperties.get('timelineCtx') as TimelineContext;\n\n      if ((this.timelineCtx?.fill !== oldTimelineCtx?.fill) && this.timelineCtx.fill) {\n        this.handleFillTimeline(this.timelineCtx.duration, this.timelineCtx.metric);\n      }\n    }\n  }\n\n  override render() {\n    return html`\n      <div class=\"timeline\">\n        <div class=\"timeline__scroll\">\n          <div>\n            <div class=\"timeline__info\" id=\"timelineInfo\">\n              ${this.timelineInfo}\n            </div>\n            <timeline-chapters \n              .chapters=${this.chapters}\n            ></timeline-chapters>\n            <editor-playback \n              .timings=${this.timings} \n              .progress=${this.progress}\n              .snapshots=${this.snapshots}\n              ></editor-playback>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private handleFillTimeline(duration: number, metric: 'hours' | 'minutes') {\n    for (let i = 0; i <= duration + 0.5; i = i + 0.5) {\n      this.timelineInfo.push(html`\n        <div class=\"timeline__time ${isFloat(i) ? 'timeline__time--half' : ''}\">${getTimeString(i, metric)}</div>\n      `);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'editor-timeline': EditorTimeline;\n  }\n}\n"]}