{"version":3,"file":"editor-timeline.js","sourceRoot":"","sources":["../../../src/components/editor/editor-timeline.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAkB,IAAI,EAAE,MAAM,KAAK,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,mBAAmB,CAAC;AAC3B,OAAO,+BAA+B,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAInD,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,UAAU;IAAvC;;QAIL,YAAO,GAAwB,EAAE,CAAC;QAMlC,iBAAY,GAAiB;YAC3B,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,OAAO;YACf,IAAI,EAAE,KAAK;SACZ,CAAC;QAGF,kBAAa,GAAG,CAAC,CAAC;QAGlB,uBAAkB,GAAG,KAAK,CAAC;QAM3B,kBAAa,GAAkB;YAC7B,eAAe,EAAE,EAAE;SACpB,CAAC;QAGF,aAAQ,GAAa,EAAE,CAAC;QAGxB,cAAS,GAA6B,EAAE,CAAC;QAGzC,aAAQ,GAAwB,EAAE,CAAC;QAE3B,iBAAY,GAA0B,EAAE,CAAC;IA6CnD,CAAC;IA3CU,OAAO,CAAC,iBAAuC;QACtD,IAAI,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YACtC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBAC3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChF,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;gBAKC,IAAI,CAAC,YAAY;;;0BAGP,IAAI,CAAC,QAAQ;+BACR,IAAI,CAAC,aAAa;;;oCAGb,IAAI,CAAC,kBAAkB;+BAC5B,IAAI,CAAC,aAAa;yBACxB,IAAI,CAAC,OAAO;kCACH,IAAI,CAAC,gBAAgB;8BACzB,IAAI,CAAC,YAAY;+BAChB,IAAI,CAAC,aAAa;0BACvB,IAAI,CAAC,QAAQ;2BACZ,IAAI,CAAC,SAAS;;;;;KAKpC,CAAC;IACJ,CAAC;IAEO,kBAAkB,CAAC,QAAgB,EAAE,MAA2B;QACtE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC;YACjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAA;qCACI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE,KAAK,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC;OACnG,CAAC,CAAC;QACL,CAAC;IACH,CAAC;;AAlFe,qBAAM,GAAG,mBAAmB,AAAtB,CAAuB;AAG7C;IADC,KAAK,EAAE;+CAC0B;AAGlC;IADC,KAAK,EAAE;wDAC4B;AAGpC;IADC,KAAK,EAAE;oDAKN;AAGF;IADC,KAAK,EAAE;qDACU;AAGlB;IADC,KAAK,EAAE;0DACmB;AAG3B;IADC,KAAK,EAAE;oDACe;AAGvB;IADC,KAAK,EAAE;qDAGN;AAGF;IADC,KAAK,EAAE;gDACgB;AAGxB;IADC,KAAK,EAAE;iDACiC;AAGzC;IADC,KAAK,EAAE;gDAC2B;AArCxB,cAAc;IAD1B,aAAa,CAAC,iBAAiB,CAAC;GACpB,cAAc,CAoF1B","sourcesContent":["import { LitElement, TemplateResult, html } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { editorTimelineStyle } from '../../styles/editor-timeline.style';\nimport './editor-playback';\nimport '../timeline/timeline-chapters';\nimport { getTimeString, isFloat } from '../../utils/time';\nimport { ChapterRange, CurrentlyGrabbed, FillTimeline, Progress, RangeTimings, SeekableStyle } from '../../types';\n\n@customElement('editor-timeline')\nexport class EditorTimeline extends LitElement {\n  static override styles = editorTimelineStyle;\n\n  @state()\n  timings: Array<RangeTimings> = [];\n\n  @state()\n  currentlyGrabbed?: CurrentlyGrabbed;\n\n  @state()\n  fillTimeline: FillTimeline = {\n    duration: 0,\n    metric: 'hours',\n    fill: false,\n  };\n\n  @state()\n  videoDuration = 0;\n\n  @state()\n  shouldShowGrabbers = false;\n\n  @state()\n  seekableRect?: DOMRect;\n\n  @state()\n  seekableStyle: SeekableStyle = {\n    backgroundImage: ''\n  };\n\n  @state()\n  progress: Progress = {};\n\n  @state()\n  snapshots: Array<HTMLCanvasElement> = [];\n\n  @state()\n  chapters: Array<ChapterRange> = [];\n\n  private timelineInfo: Array<TemplateResult> = [];\n\n  override updated(changedProperties: Map<string, unknown>) {\n    if (changedProperties.has(\"timeline\")) {\n      if (this.fillTimeline.fill) {\n        this.handleFillTimeline(this.fillTimeline.duration, this.fillTimeline.metric);\n      }\n    }\n  }\n\n  override render() {\n    return html`\n      <div class=\"timeline\">\n        <div class=\"timeline__scroll\">\n          <div>\n            <div class=\"timeline__info\" id=\"timelineInfo\">\n              ${this.timelineInfo}\n            </div>\n            <timeline-chapters \n              .chapters=${this.chapters}\n              .videoDuration=${this.videoDuration}\n            ></timeline-chapters>\n            <editor-playback \n              .shouldShowGrabbers=${this.shouldShowGrabbers} \n              .videoDuration=${this.videoDuration} \n              .timings=${this.timings} \n              .currentlyGrabbed=${this.currentlyGrabbed}\n              .seekableRect=${this.seekableRect}\n              .seekableStyle=${this.seekableStyle}\n              .progress=${this.progress}\n              .snapshots=${this.snapshots}\n              ></editor-playback>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private handleFillTimeline(duration: number, metric: 'hours' | 'minutes') {\n    for (let i = 0; i <= duration + 0.5; i = i + 0.5) {\n      this.timelineInfo.push(html`\n        <div class=\"timeline__time ${isFloat(i) ? 'timeline__time--half' : ''}\">${getTimeString(i, metric)}</div>\n      `);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'editor-timeline': EditorTimeline;\n  }\n}\n"]}