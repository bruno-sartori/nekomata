npx lint-staged

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
no_color='\033[0m'

set -o nounset

printf "${blue}Initializing Husky${no_color}\n"

REPO_ROOT=$(git rev-parse --show-toplevel)
printf "Git repo is at ${yellow}$REPO_ROOT${no_color}\n"

SITE_CHANGES=$(git status -s $REPO_ROOT | wc -l)
printf "Detected ${yellow}$SITE_CHANGES${no_color} changes\n"

if [ "$SITE_CHANGES" -gt "0" ]; then
  printf "Checking to make sure package version was updated...\n"
  VERSION_CHANGED=$(git diff -G '"version":' --cached package.json | wc -l)

   # Check TypeScript files for function signature changes
  CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ts$')
  if [ -n "$CHANGED_FILES" ]; then
    printf "${blue}Checking TypeScript files for function signature changes...${no_color}\n"
    
    # Define the regex pattern
    REGEX='function\s+[a-zA-Z_$][0-9a-zA-Z_$]*\s*\([^)]*\)\s*(?:;|\{)|[a-zA-Z_$][0-9a-zA-Z_$]*\s*=\s*\([^)]*\)\s*=>\s*(?:;|\{)|(?:public|private|protected)?\s*[a-zA-Z_$][0-9a-zA-Z_$]*\s*\([^)]*\)\s*(?:;|\{)'

    # Iterate over staged TypeScript files
    for FILE in $CHANGED_FILES; do
      if [[ -f "$REPO_ROOT/$FILE" ]]; then
        printf "Checking file ${yellow}$FILE${no_color}...\n"

        # Extract and highlight changes related to the function signatures
        CHANGES=$(git diff --cached "$FILE" | sed -n -e "/^@@/!{ /^-/p; /^+/p; }")
        
        # Filter only function signatures
        SIGNATURES=$(echo "$CHANGES" | grep -P "$REGEX")

        if [ -n "$SIGNATURES" ]; then
          printf "${red}Function signature changes detected in ${yellow}$FILE${no_color}. Showing changes:\n\n"
          
          # Show the diff with color highlighting
          echo "$CHANGES" | while read -r line; do
            if [[ "$line" =~ ^\+ ]]; then
              printf "${green}${line}${no_color}\n"
            elif [[ "$line" =~ ^- ]]; then
              printf "${red}${line}${no_color}\n"
            else
              printf "${no_color}${line}${no_color}\n"
            fi
          done

          printf "\nAborting commit.${no_color}\n"
          exit 1
        fi
      fi
    done
  fi
fi

printf "${green}All checks passed. Continuing commit.${no_color}\n"

if [ "$SITE_CHANGES" -gt "0" ]; then
  printf "Checking to make sure package version was updated...\n"
# $(git diff -G '"version":' --cached origin/master package.json | wc -l)
  VERSION_CHANGED=$(git diff -G '"version":' --cached package.json | wc -l)

  if [ "$VERSION_CHANGED" -gt "0" ]; then
    printf "${green}Version was updated!  Continuing...${no_color}\n"
  else
    printf "${red}Version was not updated :( Aborting commit.${no_color}\n"
    exit 1
  fi
fi


