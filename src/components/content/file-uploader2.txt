import { LitElement, html } from 'lit';
import { customElement, state } from 'lit/decorators.js';
import { fileUploaderStyle } from '../../styles/file-uploader.style';
import { consume } from '@lit/context';
import { contentContext, initialContentContext } from '../../contexts/content-context';
import { ContentContext } from '../../@types/contexts';
import UpdateContentContextEvent from '../../events/update-content-context';
import './uploaded-file';
// import { secondsToHHMMSS } from '../../utils/time';
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { toBlobURL, fetchFile } from "@ffmpeg/util";
// import { secondsToHHMMSS } from '../../utils/time';

@customElement('file-uploader')
export class FileUploader extends LitElement {
  static override styles = fileUploaderStyle;

  private ffmpeg: FFmpeg | null = null;

  @consume({ context: contentContext, subscribe: true })
  @state()
  private contentCtx: ContentContext = initialContentContext;

  constructor() {
    super();
    
    this.loadFFmpeg().then(() => {
      console.log(this.ffmpeg);
    });
  }

  override render() {
    return html`
      <div class="file-uploader">
        <h1 class="file-uploader__title text">Upload files</h1>
        <p class="file-uploader__description text">Add your documents here. You can add up to 10 files.</p>
        <div 
          class="file-uploader__picker" 
          @dragenter="${this.onDragEnter}" 
          @dragover="${this.onDragOver}"
          @drop="${this.onDrop}" 
          @click="${this.onClick}"
        >
          <input type="file" id="file" multiple class="file-uploader__file" accept="video/*" @change="${this.onSelectFile}" hidden>
          <h2 class="file-uploader__picker__title text">Drag & drop files here or choose files</h2>
          <p class="file-uploader__picker__description text">1 GB max file size</p>
        </div>
        <h2 class="title-secondary text">Uploaded Files</h2>
        <div class="file-uploader__uploaded-files">
          ${this.contentCtx.files?.length && Array.from(this.contentCtx.files).map((file, i) => html`
            <uploaded-file .file=${file} .progress=${this.contentCtx.progress[i]}></uploaded-file>
          `)}
        </div>
      </div>
    `;
  }

  private onClick() {
    this.shadowRoot?.getElementById('file')?.click();
  }

  private onDragEnter(event: DragEvent) {
    const outputEl = document.getElementById('output');

    if (outputEl) {
      outputEl.textContent = '';
    }

    event.stopPropagation();
    event.preventDefault();
  }

  private onDragOver(event: DragEvent) {
    event.stopPropagation();
    event.preventDefault();
  }

  private onDrop(event: DragEvent) {
    event.stopPropagation();
    event.preventDefault();

    const dt = event.dataTransfer;
    const files = dt?.files;

    if (files) {
      this.dispatchEvent(new UpdateContentContextEvent({ files }));
    }
  }

  private onSelectFile(event: Event) {
    event.stopPropagation();
    event.preventDefault();

    const files = (event.target as HTMLInputElement).files;

    if (files) {
      /*this.dispatchEvent(new UpdateContentContextEvent({ files, progress: new Array(files.length) }));

      for (let i = 0, len = files.length; i < len; i++) {
        this.compressAndUploadChunks(files[0], (percentageComplete: number) => {
          const progress = this.contentCtx.progress;
          progress[i] = percentageComplete;
          this.dispatchEvent(new UpdateContentContextEvent({ progress }));
        });
      }*/
    }
  }

  // Function to handle compressing and uploading each chunk
  private async compressAndUploadChunks(videoFile: File, onProgress: (progress: number) => void) {
    const chunkSize = 1024 * 1024; // 1MB chunk size
    const totalSize = videoFile.size;
    let offset = 0;

    await new Promise((resolve) => {
      this.compressFile(videoFile, (compressedChunk) => {
        console.log('Received message from worker:');
        console.log(`Compressed chunk ${offset / chunkSize + 1} of ${Math.ceil(totalSize / chunkSize)}`);

        // Upload the compressed chunk to the server
        this.uploadChunk(compressedChunk, offset, totalSize, onProgress).then(() => {
          //offset += chunkSize; // Move to the next chunk

          // Calculate the upload progress
          //const progress = Math.min((offset / totalSize) * 100, 100);
          //onProgress(progress); // Call the progress callback

          resolve(true);
        });
      });
    });
  }

  private async loadFFmpeg() {
    this.ffmpeg = new FFmpeg();
    const baseURL = "https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";
  
    this.ffmpeg.on("log", ({ message }: { message: any }) => {
      console.log(message);
    })

    this.ffmpeg.on("progress", ({ progress }: { progress: any }) => {
      console.log(`${progress * 100} %`);
    });

    await this.ffmpeg.load({
      coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, "text/javascript"),
      wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, "application/wasm"),
    });
  }

  private async compressFile(file: File, callback: (file: Blob) => void): Promise<any> {
    try {
      if (!this.ffmpeg?.loaded) {
        await this.ffmpeg?.load();
      }
      
      console.log(this.ffmpeg)

      await this.ffmpeg!.writeFile(file.name, await fetchFile(file));
      console.log('Compressing chunk...');

      // const chunkSize = 1024 * 1024; // 1MB chunk size
      const totalSize = file.size;
      let offset = 0;

      console.log('AQUI')
      
      // while (offset < totalSize) {
        // await this.ffmpeg!.exec(['-i', file.name, '-ss', secondsToHHMMSS(offset), '-t', '10', 'input_chunk.mp4']);
        console.log('Chunk extracted!');
        // Run FFmpeg to compress the chunk
        await this.ffmpeg!.exec(['-i', file.name, '-vcodec', 'libx264', '-crf', '28', 'input_chunk.mp4']);
        console.log('Compression complete!');
      
        // Read the compressed chunk
        const compressedData = await this.ffmpeg!.readFile('input_chunk.mp4');
        console.log('compressedData', compressedData);
  
        const data = new Uint8Array(compressedData as ArrayBuffer);
      
        // Convert the result into a Blob and send it back to the main thread
        const compressedChunk = new Blob([data.buffer], { type: 'video/mp4' });
        console.log('CALLBACK')
        callback(compressedChunk);
      
        offset += totalSize;
      // }
    } catch (error) {
      console.error(error);
      throw error;
    }
  }

  // Function to upload a chunk of the compressed video
  private uploadChunk(compressedChunk: any, offset: number, totalSize: number, onProgress: (progress: number) => void): Promise<boolean> {
    return new Promise((resolve, reject) => {
      const formData = new FormData();
      formData.append('file', compressedChunk, `video_chunk_${offset}.mp4`);
      formData.append('offset', offset.toString());
      formData.append('totalSize', totalSize.toString());

      const xhr = new XMLHttpRequest();
      xhr.open('POST', 'http://localhost:3000/upload-chunk', true);

      xhr.upload.addEventListener('progress', function(e){
        if(e.lengthComputable){
          let uploadPercent = e.loaded / e.total;
          uploadPercent = (uploadPercent * 100);

          onProgress(uploadPercent);  
        }
      }, false);

      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve(true);
        } else {
          reject(new Error(`Upload failed with status: ${xhr.status}`));
        }
      };

      xhr.onerror = function () {
        reject(new Error('Upload failed due to network error'));
      };

      xhr.send(formData);
    });
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'file-uploader2': FileUploader;
  }
}

